#BlueJ class context
comment0.params=node\ graph\ colorsGraph
comment0.target=boolean\ coloring(int,\ boolean[][],\ boolean[][])
comment1.params=colors
comment1.target=boolean\ checkColors(boolean[])
comment1.text=\r\n\ Returns\ true\ if\ there\ are\ almost\ 1\r\n\ color\ free\ to\ be\ use.\r\n\ \r\n\ @param\ boolean\ []\ List\ with\ the\ colors\r\n\ \r\n\ @return\ boolean\r\n
comment2.params=node\ graph\ colorsGraph
comment2.target=boolean[]\ ObtenerColoresDisponibles(int,\ boolean[][],\ boolean[][])
comment2.text=\r\n\ this\ method\ compute\ and\ return\ an\ Array\r\n\ with\ the\ colors\ witch\ is\ not\ in\ use\ by\ anyother\r\n\ partner\r\n\ \r\n\ @param\ int\ A\ node's\ index\r\n\ @param\ int\ [][]\ A\ Graph\ represented\ by\ Adjacency\ Matrix.\r\n\ \r\n\ @raturn\ ArrayList<Integer>\r\n\ \r\n
comment3.params=node\ graph
comment3.target=java.util.ArrayList\ getSuccesors(int,\ boolean[][])
comment3.text=\r\n\ This\ Method\ computes\ and\ return\ an\ ArrayList.\r\n\ those\ one\ contain\ the\ Node's\ Partne\u00B4s\ index.\r\n\ \r\n\ @param\ int\ the\ Node's\ Index\r\n\ @param\ int\ [][]\ A\ graph\ represented\ by\ Adjacecy\ Matrix.\r\n\ \r\n\ @return\ ArrayList<Integer>\r\n
numComments=4
